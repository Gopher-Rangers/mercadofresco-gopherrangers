// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock_service_locality

import (
	domain "github.com/Gopher-Rangers/mercadofresco-gopherrangers/internal/carry/domain"
	mock "github.com/stretchr/testify/mock"
)

// ServiceLocality is an autogenerated mock type for the ServiceLocality type
type ServiceLocality struct {
	mock.Mock
}

// GetAllCarriesLocality provides a mock function with given fields:
func (_m *ServiceLocality) GetAllCarriesLocality() ([]domain.Locality, error) {
	ret := _m.Called()

	var r0 []domain.Locality
	if rf, ok := ret.Get(0).(func() []domain.Locality); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Locality)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarryLocalityByID provides a mock function with given fields: id
func (_m *ServiceLocality) GetCarryLocalityByID(id int) (domain.Locality, error) {
	ret := _m.Called(id)

	var r0 domain.Locality
	if rf, ok := ret.Get(0).(func(int) domain.Locality); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Locality)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewServiceLocality interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceLocality creates a new instance of ServiceLocality. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceLocality(t mockConstructorTestingTNewServiceLocality) *ServiceLocality {
	mock := &ServiceLocality{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
