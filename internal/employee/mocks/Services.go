// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	employee "github.com/Gopher-Rangers/mercadofresco-gopherrangers/internal/employee"
	mock "github.com/stretchr/testify/mock"
)

// Services is an autogenerated mock type for the Services type
type Services struct {
	mock.Mock
}

// Create provides a mock function with given fields: cardNum, firstName, lastName, warehouseId
func (_m *Services) Create(cardNum int, firstName string, lastName string, warehouseId int) (employee.Employee, error) {
	ret := _m.Called(cardNum, firstName, lastName, warehouseId)

	var r0 employee.Employee
	if rf, ok := ret.Get(0).(func(int, string, string, int) employee.Employee); ok {
		r0 = rf(cardNum, firstName, lastName, warehouseId)
	} else {
		r0 = ret.Get(0).(employee.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, int) error); ok {
		r1 = rf(cardNum, firstName, lastName, warehouseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Services) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Services) GetAll() ([]employee.Employee, error) {
	ret := _m.Called()

	var r0 []employee.Employee
	if rf, ok := ret.Get(0).(func() []employee.Employee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]employee.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *Services) GetById(id int) (employee.Employee, error) {
	ret := _m.Called(id)

	var r0 employee.Employee
	if rf, ok := ret.Get(0).(func(int) employee.Employee); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(employee.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCount provides a mock function with given fields: id, counter
func (_m *Services) GetCount(id int, counter int) (employee.EmployeeOrderCount, error) {
	ret := _m.Called(id, counter)

	var r0 employee.EmployeeOrderCount
	if rf, ok := ret.Get(0).(func(int, int) employee.EmployeeOrderCount); ok {
		r0 = rf(id, counter)
	} else {
		r0 = ret.Get(0).(employee.EmployeeOrderCount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, counter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: emp, id
func (_m *Services) Update(emp employee.Employee, id int) (employee.Employee, error) {
	ret := _m.Called(emp, id)

	var r0 employee.Employee
	if rf, ok := ret.Get(0).(func(employee.Employee, int) employee.Employee); ok {
		r0 = rf(emp, id)
	} else {
		r0 = ret.Get(0).(employee.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(employee.Employee, int) error); ok {
		r1 = rf(emp, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewServices creates a new instance of Services. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServices(t mockConstructorTestingTNewServices) *Services {
	mock := &Services{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
