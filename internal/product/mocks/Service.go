// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	products "github.com/Gopher-Rangers/mercadofresco-gopherrangers/internal/product"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Service) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *Service) GetAll(ctx context.Context) ([]products.Product, error) {
	ret := _m.Called(ctx)

	var r0 []products.Product
	if rf, ok := ret.Get(0).(func(context.Context) []products.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Service) GetById(ctx context.Context, id int) (products.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(context.Context, int) products.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, prod
func (_m *Service) Store(ctx context.Context, prod products.Product) (products.Product, error) {
	ret := _m.Called(ctx, prod)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(context.Context, products.Product) products.Product); ok {
		r0 = rf(ctx, prod)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.Product) error); ok {
		r1 = rf(ctx, prod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, prod, id
func (_m *Service) Update(ctx context.Context, prod products.Product, id int) (products.Product, error) {
	ret := _m.Called(ctx, prod, id)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(context.Context, products.Product, int) products.Product); ok {
		r0 = rf(ctx, prod, id)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.Product, int) error); ok {
		r1 = rf(ctx, prod, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewServiceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t NewServiceT) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
