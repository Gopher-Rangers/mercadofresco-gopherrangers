// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	productbatch "github.com/Gopher-Rangers/mercadofresco-gopherrangers/internal/product_batch"
	mock "github.com/stretchr/testify/mock"
)

// Services is an autogenerated mock type for the Services type
type Services struct {
	mock.Mock
}

// Create provides a mock function with given fields: pb
func (_m *Services) Create(pb productbatch.ProductBatch) (productbatch.ProductBatch, error) {
	ret := _m.Called(pb)

	var r0 productbatch.ProductBatch
	if rf, ok := ret.Get(0).(func(productbatch.ProductBatch) productbatch.ProductBatch); ok {
		r0 = rf(pb)
	} else {
		r0 = ret.Get(0).(productbatch.ProductBatch)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productbatch.ProductBatch) error); ok {
		r1 = rf(pb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Report provides a mock function with given fields:
func (_m *Services) Report() ([]productbatch.Report, error) {
	ret := _m.Called()

	var r0 []productbatch.Report
	if rf, ok := ret.Get(0).(func() []productbatch.Report); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productbatch.Report)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportByID provides a mock function with given fields: id
func (_m *Services) ReportByID(id int) (productbatch.Report, error) {
	ret := _m.Called(id)

	var r0 productbatch.Report
	if rf, ok := ret.Get(0).(func(int) productbatch.Report); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(productbatch.Report)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewServices creates a new instance of Services. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServices(t mockConstructorTestingTNewServices) *Services {
	mock := &Services{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
