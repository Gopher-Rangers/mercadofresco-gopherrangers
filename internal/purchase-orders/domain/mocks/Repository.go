// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Gopher-Rangers/mercadofresco-gopherrangers/internal/purchase-orders/domain"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, purchaseOrder
func (_m *Repository) Create(ctx context.Context, purchaseOrder domain.PurchaseOrders) (domain.PurchaseOrders, error) {
	ret := _m.Called(ctx, purchaseOrder)

	var r0 domain.PurchaseOrders
	if rf, ok := ret.Get(0).(func(context.Context, domain.PurchaseOrders) domain.PurchaseOrders); ok {
		r0 = rf(ctx, purchaseOrder)
	} else {
		r0 = ret.Get(0).(domain.PurchaseOrders)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.PurchaseOrders) error); ok {
		r1 = rf(ctx, purchaseOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Repository) GetById(ctx context.Context, id int) (domain.PurchaseOrders, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.PurchaseOrders
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.PurchaseOrders); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.PurchaseOrders)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t NewRepositoryT) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
