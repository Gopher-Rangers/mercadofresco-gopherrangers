// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock_service

import (
	warehouse "github.com/Gopher-Rangers/mercadofresco-gopherrangers/internal/warehouse"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateWarehouse provides a mock function with given fields: code, address, tel, minCap, minTemp
func (_m *Service) CreateWarehouse(code string, address string, tel string, minCap int, minTemp int) (warehouse.Warehouse, error) {
	ret := _m.Called(code, address, tel, minCap, minTemp)

	var r0 warehouse.Warehouse
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) warehouse.Warehouse); ok {
		r0 = rf(code, address, tel, minCap, minTemp)
	} else {
		r0 = ret.Get(0).(warehouse.Warehouse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(code, address, tel, minCap, minTemp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWarehouse provides a mock function with given fields: id
func (_m *Service) DeleteWarehouse(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Service) GetAll() []warehouse.Warehouse {
	ret := _m.Called()

	var r0 []warehouse.Warehouse
	if rf, ok := ret.Get(0).(func() []warehouse.Warehouse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]warehouse.Warehouse)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *Service) GetByID(id int) (warehouse.Warehouse, error) {
	ret := _m.Called(id)

	var r0 warehouse.Warehouse
	if rf, ok := ret.Get(0).(func(int) warehouse.Warehouse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(warehouse.Warehouse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatedWarehouseID provides a mock function with given fields: id, code
func (_m *Service) UpdatedWarehouseID(id int, code string) (warehouse.Warehouse, error) {
	ret := _m.Called(id, code)

	var r0 warehouse.Warehouse
	if rf, ok := ret.Get(0).(func(int, string) warehouse.Warehouse); ok {
		r0 = rf(id, code)
	} else {
		r0 = ret.Get(0).(warehouse.Warehouse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
